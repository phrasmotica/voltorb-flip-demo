{"version":3,"sources":["VoltorbFlipGrid.ts","Cell.tsx","Stats.tsx","VoltorbFlip.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GridState","createArray","value","length","Array","fill","createGrid","size","numVoltorbs","numTwos","numThrees","numOnes","levelParameters","level","cellsOptions","VoltorbFlipGrid","grid","this","cells","flatMap","row","some","c","flipped","Lost","filter","every","Won","Pending","col","getRow","map","reduce","i","j","getCol","cellsAreDead","flippedCells","newGrid","parameters","find","p","randomFrom","shuffleArray","newRow","push","VoltorbFlipCell","arr","Math","floor","random","Cell","props","cell","parentClassName","contents","className","voltorbImage","process","showDead","gridState","src","alt","onClick","flipCell","Stats","total","a","b","voltorbCount","VoltorbFlip","useState","showDeadCells","setShowDeadCells","renderCell","getCell","getState","rowIsDead","colIsDead","range","style","textAlign","streak","score","getScore","renderGridState","state","Popup","content","position","mouseEnterDelay","disabled","trigger","nextLevel","reset","label","checked","onChange","e","data","renderGridOptions","max","from","_","create","App","setLevel","setScore","setStreak","setGrid","flip","newLevel","newStreak","min","numFlippedMultipliers","getNumberOfFlippedMultipliers","href","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abfe521c.chunk.js","sourcesContent":["const createArray = (value: number, length: number) => new Array(length).fill(value)\r\n\r\nconst createGrid = (size: number, numVoltorbs: number, numTwos: number, numThrees: number) => {\r\n    let numOnes = size * size - (numVoltorbs + numTwos + numThrees)\r\n\r\n    return [\r\n        ...createArray(0, numVoltorbs),\r\n        ...createArray(1, numOnes),\r\n        ...createArray(2, numTwos),\r\n        ...createArray(3, numThrees),\r\n    ]\r\n}\r\n\r\n// https://bulbapedia.bulbagarden.net/wiki/Voltorb_Flip\r\nconst levelParameters = [\r\n    {\r\n        level: 1,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 6, 3, 1),\r\n            createGrid(5, 6, 0, 3),\r\n            createGrid(5, 6, 5, 0),\r\n            createGrid(5, 6, 2, 2),\r\n            createGrid(5, 6, 4, 1),\r\n        ],\r\n    },\r\n    {\r\n        level: 2,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 7, 1, 3),\r\n            createGrid(5, 7, 6, 0),\r\n            createGrid(5, 7, 3, 2),\r\n            createGrid(5, 7, 0, 4),\r\n            createGrid(5, 7, 5, 1),\r\n        ],\r\n    },\r\n    {\r\n        level: 3,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 8, 2, 3),\r\n            createGrid(5, 8, 7, 0),\r\n            createGrid(5, 8, 4, 2),\r\n            createGrid(5, 8, 1, 4),\r\n            createGrid(5, 8, 6, 1),\r\n        ],\r\n    },\r\n    {\r\n        level: 4,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 8, 3, 3),\r\n            createGrid(5, 8, 0, 5),\r\n            createGrid(5, 10, 8, 0),\r\n            createGrid(5, 10, 5, 2),\r\n            createGrid(5, 10, 2, 4),\r\n        ],\r\n    },\r\n    {\r\n        level: 5,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 7, 1),\r\n            createGrid(5, 10, 4, 3),\r\n            createGrid(5, 10, 1, 5),\r\n            createGrid(5, 10, 9, 0),\r\n            createGrid(5, 10, 6, 2),\r\n        ],\r\n    },\r\n    {\r\n        level: 6,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 3, 4),\r\n            createGrid(5, 10, 0, 6),\r\n            createGrid(5, 10, 8, 1),\r\n            createGrid(5, 10, 5, 3),\r\n            createGrid(5, 10, 2, 5),\r\n        ],\r\n    },\r\n    {\r\n        level: 7,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 7, 2),\r\n            createGrid(5, 10, 4, 4),\r\n            createGrid(5, 13, 1, 6),\r\n            createGrid(5, 13, 9, 1),\r\n            createGrid(5, 10, 6, 3),\r\n        ],\r\n    },\r\n    {\r\n        level: 8,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 0, 7),\r\n            createGrid(5, 10, 8, 2),\r\n            createGrid(5, 10, 5, 4),\r\n            createGrid(5, 10, 2, 6),\r\n            createGrid(5, 10, 7, 3),\r\n        ],\r\n    },\r\n]\r\n\r\nexport enum GridState {\r\n    Pending,\r\n    Won,\r\n    Lost,\r\n}\r\n\r\nexport class VoltorbFlipGrid {\r\n    grid: VoltorbFlipCell[][]\r\n\r\n    constructor(grid: VoltorbFlipCell[][]) {\r\n        this.grid = grid\r\n    }\r\n\r\n    static create(level: number) {\r\n        let newGrid = []\r\n\r\n        let parameters = levelParameters.find(p => p.level === level)!\r\n\r\n        let cells = randomFrom(parameters.cellsOptions)\r\n\r\n        shuffleArray(cells)\r\n\r\n        for (let i = 0; i < parameters.size; i++) {\r\n            let newRow: VoltorbFlipCell[] = []\r\n\r\n            for (let j = 0; j < parameters.size; j++) {\r\n                let value = cells[i * parameters.size + j]\r\n                newRow.push(new VoltorbFlipCell(value))\r\n            }\r\n\r\n            newGrid.push(newRow)\r\n        }\r\n\r\n        return new VoltorbFlipGrid(newGrid)\r\n    }\r\n\r\n    size() {\r\n        return this.grid.length\r\n    }\r\n\r\n    getState() {\r\n        let cells = this.grid.flatMap(row => row)\r\n        if (cells.some(c => c.value === 0 && c.flipped)) {\r\n            return GridState.Lost\r\n        }\r\n\r\n        if (cells.filter(c => c.value > 1).every(c => c.flipped)) {\r\n            return GridState.Won\r\n        }\r\n\r\n        return GridState.Pending\r\n    }\r\n\r\n    getCell(row: number, col: number) {\r\n        return this.grid[row][col]\r\n    }\r\n\r\n    getRow(row: number) {\r\n        return this.grid[row]\r\n    }\r\n\r\n    getRowTotal(row: number) {\r\n        return this.getRow(row).map(c => c.value).reduce((i, j) => i + j)\r\n    }\r\n\r\n    getCol(col: number) {\r\n        return this.grid.map(row => row[col])\r\n    }\r\n\r\n    getColTotal(col: number) {\r\n        let cellValues = this.getCol(col).map(c => c.value)\r\n        return cellValues.reduce((i, j) => i + j)\r\n    }\r\n\r\n    countVoltorbsInRow(row: number) {\r\n        return this.grid[row].filter(c => c.value === 0).length\r\n    }\r\n\r\n    countVoltorbsInCol(col: number) {\r\n        let cellValues = this.grid.map(row => row[col]).map(c => c.value)\r\n        return cellValues.filter(i => i === 0).length\r\n    }\r\n\r\n    rowIsDead(row: number) {\r\n        return this.cellsAreDead(this.grid[row])\r\n    }\r\n\r\n    colIsDead(col: number) {\r\n        return this.cellsAreDead(this.grid.map(row => row[col]))\r\n    }\r\n\r\n    private cellsAreDead(cells: VoltorbFlipCell[]) {\r\n        let numVoltorbs = cells.filter(c => c.value === 0).length\r\n        let sum = cells.map(c => c.value).reduce((i, j) => i + j)\r\n        let numTwosFlipped = cells.filter(c => c.value === 2 && c.flipped).length\r\n        let numThreesFlipped = cells.filter(c => c.value === 3 && c.flipped).length\r\n\r\n        return numVoltorbs + sum - 5 <= numTwosFlipped + 2 * numThreesFlipped\r\n    }\r\n\r\n    getScore() {\r\n        let flippedCells = this.grid.flatMap(row => row).filter(c => c.flipped)\r\n        if (flippedCells.length <= 0) {\r\n            return 0\r\n        }\r\n\r\n        return flippedCells.map(c => c.value).reduce((i, j) => i * j)\r\n    }\r\n\r\n    getNumberOfFlippedMultipliers() {\r\n        return this.grid.flatMap(row => row).filter(c => c.value > 0 && c.flipped).length\r\n    }\r\n}\r\n\r\nexport class VoltorbFlipCell {\r\n    value: number\r\n    flipped: boolean\r\n\r\n    constructor(value: number) {\r\n        this.value = value\r\n        this.flipped = false\r\n    }\r\n\r\n    flip() {\r\n        this.flipped = true\r\n    }\r\n}\r\n\r\nconst randomFrom = <T>(arr: T[]) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\n// https://stackoverflow.com/a/12646864\r\nconst shuffleArray = (arr: number[]) => {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]]\r\n    }\r\n}\r\n","import { GridState, VoltorbFlipCell } from \"./VoltorbFlipGrid\"\r\n\r\ninterface CellProps {\r\n    cell: VoltorbFlipCell\r\n    gridState: GridState\r\n    showDead: boolean\r\n    flipCell: () => void\r\n}\r\n\r\nexport const Cell = (props: CellProps) => {\r\n    let cell = props.cell\r\n\r\n    let parentClassName = \"flip-grid-cell\"\r\n\r\n    let contents = <span>?</span>\r\n    let className = \"cell-button\"\r\n\r\n    let voltorbImage = process.env.PUBLIC_URL + \"/voltorb.png\"\r\n\r\n    if (props.showDead) {\r\n        parentClassName += \" dead\"\r\n    }\r\n\r\n    let finished = props.gridState !== GridState.Pending\r\n\r\n    if (finished) {\r\n        contents = <span>{cell.value}</span>\r\n        className += \" shown\"\r\n\r\n        if (cell.value === 0) {\r\n            contents = <img src={voltorbImage} alt=\"voltorb\" />\r\n            className += \" voltorb\"\r\n        }\r\n    }\r\n\r\n    if (cell.flipped) {\r\n        contents = <span>{cell.value}</span>\r\n        className += \" flipped\"\r\n\r\n        if (cell.value === 0) {\r\n            contents = <img src={voltorbImage} alt=\"voltorb\" />\r\n            className += \" voltorb\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={parentClassName}>\r\n            <div\r\n                className={className}\r\n                onClick={props.flipCell}>\r\n                {contents}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { VoltorbFlipCell } from \"./VoltorbFlipGrid\"\r\n\r\ninterface StatsProps {\r\n    cells: VoltorbFlipCell[]\r\n}\r\n\r\nexport const Stats = (props: StatsProps) => {\r\n    let total = props.cells.map(a => a.value).reduce((a, b) => a + b)\r\n    let voltorbCount = props.cells.filter(a => a.value === 0).length\r\n\r\n    return (\r\n        <div className=\"flip-grid-cell\">\r\n            <div className=\"stats\">\r\n                <div>{total}, {voltorbCount}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { Popup } from \"semantic-ui-react\"\r\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\"\r\nimport Checkbox from \"semantic-ui-react/dist/commonjs/modules/Checkbox\"\r\nimport { Cell } from \"./Cell\"\r\nimport { Stats } from \"./Stats\"\r\n\r\nimport { GridState, VoltorbFlipGrid } from \"./VoltorbFlipGrid\"\r\n\r\ninterface VoltorbFlipProps {\r\n    level: number\r\n    streak: number\r\n    score: number\r\n    grid: VoltorbFlipGrid\r\n    flipCell: (row: number, col: number) => void\r\n    nextLevel: (grid: VoltorbFlipGrid) => void\r\n    reset: () => void\r\n}\r\n\r\nexport const VoltorbFlip = (props: VoltorbFlipProps) => {\r\n    const [showDeadCells, setShowDeadCells] = useState(false)\r\n\r\n    const renderGrid = (grid: VoltorbFlipGrid) => {\r\n        return (\r\n            <div>\r\n                {range(grid.size()).map(i => (\r\n                    <div className=\"flip-grid-row\">\r\n                        {range(grid.size()).map(j => renderCell(grid, i, j))}\r\n\r\n                        <Stats cells={grid.getRow(i)} />\r\n                    </div>\r\n                ))}\r\n\r\n                <div className=\"flip-grid-row\">\r\n                    {range(grid.size()).map(j => <Stats cells={grid.getCol(j)} />)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderCell = (grid: VoltorbFlipGrid, row: number, col: number) => {\r\n        let cell = grid.getCell(row, col)\r\n        let gridState = grid.getState()\r\n        let showDead = !cell.flipped && showDeadCells && (grid.rowIsDead(row) || grid.colIsDead(col))\r\n\r\n        const flipCell = () => props.flipCell(row, col)\r\n\r\n        return <Cell cell={cell} gridState={gridState} showDead={showDead} flipCell={flipCell} />\r\n    }\r\n\r\n    const renderGridState = (grid: VoltorbFlipGrid) => (\r\n        <div className=\"grid-state\">\r\n            <div style={{ textAlign: \"start\" }}>\r\n                <div>\r\n                    Level: {props.level}\r\n                </div>\r\n\r\n                <div>\r\n                    Streak: {props.streak}\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ textAlign: \"end\" }}>\r\n                <div>\r\n                    Coins: {props.score}\r\n                </div>\r\n\r\n                <div>\r\n                    Coins this round: {grid?.getScore() ?? 0}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const renderGridOptions = (grid: VoltorbFlipGrid) => {\r\n        let state = grid?.getState()\r\n\r\n        return (\r\n            <div className=\"grid-options\">\r\n                <Popup\r\n                    content=\"Move to the next level!\"\r\n                    position=\"bottom left\"\r\n                    mouseEnterDelay={500}\r\n                    disabled={state === GridState.Pending}\r\n                    trigger={\r\n                    <Button\r\n                        disabled={state === GridState.Pending}\r\n                        onClick={() => props.nextLevel(grid)}>\r\n                        Next Level\r\n                    </Button>\r\n                } />\r\n\r\n                <Popup\r\n                    content=\"Start a new game from level 1.\"\r\n                    position=\"bottom center\"\r\n                    mouseEnterDelay={500}\r\n                    trigger={\r\n                    <Button\r\n                        onClick={props.reset}>\r\n                        Reset\r\n                    </Button>\r\n                } />\r\n\r\n                <Popup\r\n                    content=\"Highlight cells that MUST contain either 1 coin or a Voltorb, based on current information.\"\r\n                    position=\"bottom right\"\r\n                    mouseEnterDelay={500}\r\n                    trigger={\r\n                    <Checkbox\r\n                        className=\"option-checkbox\"\r\n                        label=\"Show dead cells\"\r\n                        checked={showDeadCells}\r\n                        onChange={(e, data) => setShowDeadCells(data.checked ?? false)} />\r\n                } />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {renderGrid(props.grid)}\r\n            {renderGridState(props.grid)}\r\n            {renderGridOptions(props.grid)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst range = (max: number) => Array.from(new Array(max), (_, i) => i)\r\n","import { useState } from \"react\"\r\n\r\nimport { VoltorbFlip } from \"./VoltorbFlip\"\r\nimport { GridState, VoltorbFlipGrid } from \"./VoltorbFlipGrid\"\r\n\r\nimport \"./App.css\"\r\n\r\nconst newGrid = (level: number) => VoltorbFlipGrid.create(level)\r\n\r\nconst App = () => {\r\n    const [level, setLevel] = useState(1)\r\n    const [score, setScore] = useState(0)\r\n    const [streak, setStreak] = useState(0)\r\n    const [grid, setGrid] = useState(newGrid(level))\r\n\r\n    const flipCell = (row: number, col: number) => {\r\n        grid.getCell(row, col).flip()\r\n        setGrid(new VoltorbFlipGrid(grid.grid))\r\n    }\r\n\r\n    // https://bulbapedia.bulbagarden.net/wiki/Voltorb_Flip\r\n    const nextLevel = (grid: VoltorbFlipGrid) => {\r\n        let newLevel = level\r\n        let newStreak = 0\r\n\r\n        let state = grid.getState()\r\n        if (state === GridState.Won) {\r\n            newStreak = streak + 1\r\n\r\n            if (newStreak >= 5) {\r\n                newLevel = 8\r\n            }\r\n            else {\r\n                newLevel = Math.min(8, level + 1)\r\n            }\r\n\r\n            setScore(score + grid.getScore())\r\n        }\r\n\r\n        if (state === GridState.Lost) {\r\n            let numFlippedMultipliers = grid.getNumberOfFlippedMultipliers()\r\n            if (numFlippedMultipliers < level) {\r\n                newLevel = Math.max(1, Math.min(8, level, numFlippedMultipliers))\r\n            }\r\n        }\r\n\r\n        setLevel(newLevel)\r\n        setStreak(newStreak)\r\n        setGrid(newGrid(newLevel))\r\n    }\r\n\r\n    const reset = () => {\r\n        setLevel(1)\r\n        setStreak(0)\r\n        setGrid(newGrid(1))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1>Voltorb Flip</h1>\r\n\r\n                <h4>A clone of the beloved mini-game from Pok&eacute;mon HeartGold and SoulSilver.</h4>\r\n\r\n                <VoltorbFlip\r\n                    level={level}\r\n                    streak={streak}\r\n                    score={score}\r\n                    grid={grid}\r\n                    flipCell={flipCell}\r\n                    nextLevel={nextLevel}\r\n                    reset={reset} />\r\n            </header>\r\n\r\n            <footer>\r\n                <a href=\"https://www.icons101.com/icon/id_60093/setid_928/Pokemon_by_HEKTakun/100_Voltorb\" title=\"voltorb icon\">Voltorb icon created by HEKTakun - Icons101</a>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}