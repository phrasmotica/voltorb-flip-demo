{"version":3,"sources":["VoltorbFlipGrid.ts","PButton.tsx","ResetModal.tsx","Cell.tsx","Stats.tsx","VoltorbFlip.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GridState","PButton","props","className","colour","disabled","click","frozen","undefined","onClick","children","ResetModal","Modal","onClose","setOpen","open","size","Header","Icon","name","Content","Actions","resetGame","createArray","value","length","Array","fill","createGrid","numVoltorbs","numTwos","numThrees","numOnes","levelParameters","level","cellsOptions","VoltorbFlipGrid","grid","this","cells","flatMap","row","some","c","flipped","Lost","filter","every","Won","Pending","col","getRow","map","reduce","i","j","getCol","cellsAreDead","flippedCells","coords","maxMeanScore","forEach","cell","meanScore","computeMeanScore","Math","max","push","rowVoltorbCount","countVoltorbsInRow","colVoltorbCount","countVoltorbsInCol","getRowTotal","getColTotal","newGrid","parameters","find","p","randomFrom","shuffleArray","newRow","VoltorbFlipCell","arr","floor","random","Cell","useState","highlighted","setHighlighted","useEffect","showHighlighted","parentClassName","contents","voltorbImage","process","finished","gridState","src","alt","showDead","flipCell","Stats","total","a","b","voltorbCount","VoltorbFlip","hintCoords","setHintCoords","showDeadCells","setShowDeadCells","getState","renderCell","getCell","rowIsDead","colIsDead","getCoinsThisRoundStr","flippedMultipliers","getFlippedMultipliers","join","getScore","nextLevel","reset","showHints","computeHints","range","streak","score","renderGridState","state","Popup","content","position","mouseEnterDelay","trigger","label","checked","onChange","e","data","renderGridOptions","from","_","create","App","setLevel","setScore","setStreak","setGrid","showResetModal","setShowResetModal","flip","newLevel","newStreak","min","numFlippedMultipliers","href","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d22c98b3.chunk.js","sourcesContent":["const createArray = (value: number, length: number) => new Array(length).fill(value)\r\n\r\nconst createGrid = (size: number, numVoltorbs: number, numTwos: number, numThrees: number) => {\r\n    let numOnes = size * size - (numVoltorbs + numTwos + numThrees)\r\n\r\n    return [\r\n        ...createArray(0, numVoltorbs),\r\n        ...createArray(1, numOnes),\r\n        ...createArray(2, numTwos),\r\n        ...createArray(3, numThrees),\r\n    ]\r\n}\r\n\r\n// https://bulbapedia.bulbagarden.net/wiki/Voltorb_Flip\r\nconst levelParameters = [\r\n    {\r\n        level: 1,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 6, 3, 1),\r\n            createGrid(5, 6, 0, 3),\r\n            createGrid(5, 6, 5, 0),\r\n            createGrid(5, 6, 2, 2),\r\n            createGrid(5, 6, 4, 1),\r\n        ],\r\n    },\r\n    {\r\n        level: 2,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 7, 1, 3),\r\n            createGrid(5, 7, 6, 0),\r\n            createGrid(5, 7, 3, 2),\r\n            createGrid(5, 7, 0, 4),\r\n            createGrid(5, 7, 5, 1),\r\n        ],\r\n    },\r\n    {\r\n        level: 3,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 8, 2, 3),\r\n            createGrid(5, 8, 7, 0),\r\n            createGrid(5, 8, 4, 2),\r\n            createGrid(5, 8, 1, 4),\r\n            createGrid(5, 8, 6, 1),\r\n        ],\r\n    },\r\n    {\r\n        level: 4,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 8, 3, 3),\r\n            createGrid(5, 8, 0, 5),\r\n            createGrid(5, 10, 8, 0),\r\n            createGrid(5, 10, 5, 2),\r\n            createGrid(5, 10, 2, 4),\r\n        ],\r\n    },\r\n    {\r\n        level: 5,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 7, 1),\r\n            createGrid(5, 10, 4, 3),\r\n            createGrid(5, 10, 1, 5),\r\n            createGrid(5, 10, 9, 0),\r\n            createGrid(5, 10, 6, 2),\r\n        ],\r\n    },\r\n    {\r\n        level: 6,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 3, 4),\r\n            createGrid(5, 10, 0, 6),\r\n            createGrid(5, 10, 8, 1),\r\n            createGrid(5, 10, 5, 3),\r\n            createGrid(5, 10, 2, 5),\r\n        ],\r\n    },\r\n    {\r\n        level: 7,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 7, 2),\r\n            createGrid(5, 10, 4, 4),\r\n            createGrid(5, 13, 1, 6),\r\n            createGrid(5, 13, 9, 1),\r\n            createGrid(5, 10, 6, 3),\r\n        ],\r\n    },\r\n    {\r\n        level: 8,\r\n        size: 5,\r\n        cellsOptions: [\r\n            createGrid(5, 10, 0, 7),\r\n            createGrid(5, 10, 8, 2),\r\n            createGrid(5, 10, 5, 4),\r\n            createGrid(5, 10, 2, 6),\r\n            createGrid(5, 10, 7, 3),\r\n        ],\r\n    },\r\n]\r\n\r\nexport enum GridState {\r\n    Pending,\r\n    Won,\r\n    Lost,\r\n}\r\n\r\nexport class VoltorbFlipGrid {\r\n    grid: VoltorbFlipCell[][]\r\n\r\n    constructor(grid: VoltorbFlipCell[][]) {\r\n        this.grid = grid\r\n    }\r\n\r\n    static create(level: number) {\r\n        let newGrid = []\r\n\r\n        let parameters = levelParameters.find(p => p.level === level)!\r\n\r\n        let cells = randomFrom(parameters.cellsOptions)\r\n\r\n        shuffleArray(cells)\r\n\r\n        for (let i = 0; i < parameters.size; i++) {\r\n            let newRow: VoltorbFlipCell[] = []\r\n\r\n            for (let j = 0; j < parameters.size; j++) {\r\n                let value = cells[i * parameters.size + j]\r\n                newRow.push(new VoltorbFlipCell(value))\r\n            }\r\n\r\n            newGrid.push(newRow)\r\n        }\r\n\r\n        return new VoltorbFlipGrid(newGrid)\r\n    }\r\n\r\n    size() {\r\n        return this.grid.length\r\n    }\r\n\r\n    getState() {\r\n        let cells = this.grid.flatMap(row => row)\r\n        if (cells.some(c => c.value === 0 && c.flipped)) {\r\n            return GridState.Lost\r\n        }\r\n\r\n        if (cells.filter(c => c.value > 1).every(c => c.flipped)) {\r\n            return GridState.Won\r\n        }\r\n\r\n        return GridState.Pending\r\n    }\r\n\r\n    getCell(row: number, col: number) {\r\n        return this.grid[row][col]\r\n    }\r\n\r\n    getRow(row: number) {\r\n        return this.grid[row]\r\n    }\r\n\r\n    getRowTotal(row: number) {\r\n        return this.getRow(row).map(c => c.value).reduce((i, j) => i + j)\r\n    }\r\n\r\n    getCol(col: number) {\r\n        return this.grid.map(row => row[col])\r\n    }\r\n\r\n    getColTotal(col: number) {\r\n        let cellValues = this.getCol(col).map(c => c.value)\r\n        return cellValues.reduce((i, j) => i + j)\r\n    }\r\n\r\n    countVoltorbsInRow(row: number) {\r\n        return this.grid[row].filter(c => c.value === 0).length\r\n    }\r\n\r\n    countVoltorbsInCol(col: number) {\r\n        let cellValues = this.grid.map(row => row[col]).map(c => c.value)\r\n        return cellValues.filter(i => i === 0).length\r\n    }\r\n\r\n    rowIsDead(row: number) {\r\n        return this.cellsAreDead(this.grid[row])\r\n    }\r\n\r\n    colIsDead(col: number) {\r\n        return this.cellsAreDead(this.grid.map(row => row[col]))\r\n    }\r\n\r\n    private cellsAreDead(cells: VoltorbFlipCell[]) {\r\n        let numVoltorbs = cells.filter(c => c.value === 0).length\r\n        let sum = cells.map(c => c.value).reduce((i, j) => i + j)\r\n        let numTwosFlipped = cells.filter(c => c.value === 2 && c.flipped).length\r\n        let numThreesFlipped = cells.filter(c => c.value === 3 && c.flipped).length\r\n\r\n        return numVoltorbs + sum - 5 <= numTwosFlipped + 2 * numThreesFlipped\r\n    }\r\n\r\n    getScore() {\r\n        let flippedCells = this.grid.flatMap(row => row).filter(c => c.flipped)\r\n        if (flippedCells.length <= 0) {\r\n            return 0\r\n        }\r\n\r\n        return flippedCells.map(c => c.value).reduce((i, j) => i * j)\r\n    }\r\n\r\n    getFlippedMultipliers() {\r\n        return this.grid.flatMap(row => row).filter(c => c.value > 0 && c.flipped)\r\n    }\r\n\r\n    computeHints() {\r\n        let coords = [] as [number, number][]\r\n\r\n        let maxMeanScore = 0\r\n\r\n        this.grid.forEach((row, i) => {\r\n            row.forEach((cell, j) => {\r\n                if (!cell.flipped) {\r\n                    let meanScore = this.computeMeanScore(i, j)\r\n                    maxMeanScore = Math.max(maxMeanScore, meanScore)\r\n                }\r\n            })\r\n        })\r\n\r\n        this.grid.forEach((row, i) => {\r\n            row.forEach((cell, j) => {\r\n                if (!cell.flipped) {\r\n                    let meanScore = this.computeMeanScore(i, j)\r\n                    if (meanScore === maxMeanScore) {\r\n                        coords.push([i, j])\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        return coords\r\n    }\r\n\r\n    computeMeanScore(row: number, col: number) {\r\n        let rowVoltorbCount = this.countVoltorbsInRow(row)\r\n        let colVoltorbCount = this.countVoltorbsInCol(col)\r\n\r\n        if (rowVoltorbCount === 0 || colVoltorbCount === 0) {\r\n            return 100 // nominal \"max\" value\r\n        }\r\n\r\n        let meanRowScore = this.getRowTotal(row) / rowVoltorbCount\r\n        let meanColScore = this.getColTotal(col) / colVoltorbCount\r\n        return meanRowScore * meanColScore\r\n    }\r\n}\r\n\r\nexport class VoltorbFlipCell {\r\n    value: number\r\n    flipped: boolean\r\n\r\n    constructor(value: number) {\r\n        this.value = value\r\n        this.flipped = false\r\n    }\r\n\r\n    flip() {\r\n        this.flipped = true\r\n    }\r\n}\r\n\r\nconst randomFrom = <T>(arr: T[]) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\n// https://stackoverflow.com/a/12646864\r\nconst shuffleArray = (arr: number[]) => {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]]\r\n    }\r\n}\r\n","import { PropsWithChildren } from \"react\"\r\n\r\ntype Colour = \"green\" | \"red\"\r\n\r\ninterface PButtonProps {\r\n    className?: string\r\n    colour?: Colour\r\n    disabled?: boolean\r\n    frozen?: boolean\r\n    onClick?: () => void\r\n}\r\n\r\nexport const PButton = (props: PropsWithChildren<PButtonProps>) => {\r\n    let className = \"pbutton\"\r\n\r\n    if (props.className) {\r\n        className += ` ${props.className}`\r\n    }\r\n\r\n    if (props.colour) {\r\n        className += ` ${props.colour}`\r\n    }\r\n\r\n    if (props.disabled) {\r\n        className += \" disabled\"\r\n    }\r\n\r\n    const click = (props.frozen || props.disabled) ? undefined : props.onClick\r\n\r\n    return (\r\n        <div className={className} onClick={click}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import { Header, Icon, Modal } from \"semantic-ui-react\"\r\n\r\nimport { PButton } from \"./PButton\"\r\n\r\ninterface ResetModalProps {\r\n    open: boolean\r\n    setOpen: (open: boolean) => void\r\n    resetGame: () => void\r\n}\r\n\r\nexport const ResetModal = (props: ResetModalProps) => {\r\n    const reset = () => {\r\n        props.resetGame()\r\n        props.setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={() => props.setOpen(false)}\r\n            open={props.open}\r\n            size=\"mini\">\r\n            <Header>\r\n                <Icon name=\"warning\" />\r\n                Reset\r\n            </Header>\r\n            <Modal.Content>\r\n                <p>\r\n                    Are you sure you want to reset the game?\r\n                    This will also clear your level, score and streak!\r\n                </p>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <PButton colour=\"green\" onClick={reset}>\r\n                    <Icon name=\"checkmark\" />\r\n                    Yes\r\n                </PButton>\r\n\r\n                <PButton colour=\"red\" onClick={() => props.setOpen(false)}>\r\n                    <Icon name=\"remove\" />\r\n                    No\r\n                </PButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\n\r\nimport { PButton } from \"./PButton\"\r\nimport { GridState, VoltorbFlipCell } from \"./VoltorbFlipGrid\"\r\n\r\ninterface CellProps {\r\n    cell: VoltorbFlipCell\r\n    gridState: GridState\r\n    showHighlighted: boolean\r\n    showDead: boolean\r\n    flipCell: () => void\r\n}\r\n\r\nexport const Cell = (props: CellProps) => {\r\n    const [highlighted, setHighlighted] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setHighlighted(props.showHighlighted)\r\n    }, [props.showHighlighted])\r\n\r\n    let cell = props.cell\r\n\r\n    let parentClassName = \"flip-grid-cell\"\r\n\r\n    let contents = <span>?</span>\r\n    let className = \"cell-button\"\r\n\r\n    let voltorbImage = process.env.PUBLIC_URL + \"/voltorb.png\"\r\n\r\n    let finished = props.gridState !== GridState.Pending\r\n\r\n    if (cell.flipped) {\r\n        contents = <span>{cell.value}</span>\r\n        className += \" flipped\"\r\n\r\n        if (cell.value === 0) {\r\n            contents = <img src={voltorbImage} alt=\"voltorb\" />\r\n        }\r\n    }\r\n    else if (highlighted) {\r\n        className += \" highlighted\"\r\n    }\r\n    else if (finished) {\r\n        contents = <span>{cell.value}</span>\r\n        className += \" shown\"\r\n\r\n        if (cell.value === 0) {\r\n            contents = <img src={voltorbImage} alt=\"voltorb\" />\r\n        }\r\n    }\r\n    else if (props.showDead) {\r\n        parentClassName += \" dead\"\r\n    }\r\n\r\n    return (\r\n        <div className={parentClassName}>\r\n            <PButton\r\n                className={className}\r\n                frozen={finished || cell.flipped}\r\n                onClick={props.flipCell}>\r\n                {contents}\r\n            </PButton>\r\n        </div>\r\n    )\r\n}\r\n","import { VoltorbFlipCell } from \"./VoltorbFlipGrid\"\r\n\r\ninterface StatsProps {\r\n    cells: VoltorbFlipCell[]\r\n}\r\n\r\nexport const Stats = (props: StatsProps) => {\r\n    let total = props.cells.map(a => a.value).reduce((a, b) => a + b)\r\n    let voltorbCount = props.cells.filter(a => a.value === 0).length\r\n\r\n    let voltorbImage = process.env.PUBLIC_URL + \"/voltorb.png\"\r\n\r\n    return (\r\n        <div className=\"flip-grid-cell\">\r\n            <div className=\"stats\">\r\n                <div className=\"total-indicator\">\r\n                    {total}\r\n                </div>\r\n\r\n                <div className=\"voltorb-indicator\">\r\n                    <div>{voltorbCount}</div>\r\n                    <img src={voltorbImage} alt=\"voltorb\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { Popup } from \"semantic-ui-react\"\r\nimport Checkbox from \"semantic-ui-react/dist/commonjs/modules/Checkbox\"\r\n\r\nimport { Cell } from \"./Cell\"\r\nimport { PButton } from \"./PButton\"\r\nimport { Stats } from \"./Stats\"\r\nimport { GridState, VoltorbFlipGrid } from \"./VoltorbFlipGrid\"\r\n\r\ninterface VoltorbFlipProps {\r\n    level: number\r\n    streak: number\r\n    score: number\r\n    grid: VoltorbFlipGrid\r\n    flipCell: (row: number, col: number) => void\r\n    nextLevel: (grid: VoltorbFlipGrid) => void\r\n    reset: () => void\r\n}\r\n\r\nexport const VoltorbFlip = (props: VoltorbFlipProps) => {\r\n    const [hintCoords, setHintCoords] = useState<[number, number][]>([])\r\n    const [showDeadCells, setShowDeadCells] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (props.grid.getState() !== GridState.Pending) {\r\n            setHintCoords([])\r\n        }\r\n    }, [props.grid])\r\n\r\n    const renderGrid = (grid: VoltorbFlipGrid) => {\r\n        return (\r\n            <div>\r\n                {range(grid.size()).map(i => (\r\n                    <div className=\"flip-grid-row\">\r\n                        {range(grid.size()).map(j => renderCell(grid, i, j))}\r\n\r\n                        <Stats cells={grid.getRow(i)} />\r\n                    </div>\r\n                ))}\r\n\r\n                <div className=\"flip-grid-row\">\r\n                    {range(grid.size()).map(j => <Stats cells={grid.getCol(j)} />)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderCell = (grid: VoltorbFlipGrid, row: number, col: number) => {\r\n        let cell = grid.getCell(row, col)\r\n        let gridState = grid.getState()\r\n        let showHighlighted = hintCoords.some(c => c[0] === row && c[1] === col)\r\n        let showDead = !cell.flipped && showDeadCells && (grid.rowIsDead(row) || grid.colIsDead(col))\r\n\r\n        const flipCell = () => props.flipCell(row, col)\r\n\r\n        return <Cell\r\n            cell={cell}\r\n            gridState={gridState}\r\n            showHighlighted={showHighlighted}\r\n            showDead={showDead}\r\n            flipCell={flipCell} />\r\n    }\r\n\r\n    const renderGridState = (grid: VoltorbFlipGrid) => (\r\n        <div className=\"grid-state\">\r\n            <div>\r\n                <div>\r\n                    Level: {props.level}\r\n                </div>\r\n\r\n                <div>\r\n                    Streak: {props.streak}\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <div>\r\n                    Total coins: {props.score}\r\n                </div>\r\n\r\n                <div>\r\n                    Coins this round: {getCoinsThisRoundStr(grid)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const getCoinsThisRoundStr = (grid: VoltorbFlipGrid) => {\r\n        let flippedMultipliers = grid.getFlippedMultipliers().filter(c => c.value > 1)\r\n\r\n        if (flippedMultipliers.length === 0) {\r\n            return \"0\"\r\n        }\r\n\r\n        if (flippedMultipliers.length === 1) {\r\n            return `${flippedMultipliers[0].value}`\r\n        }\r\n\r\n        let calc = flippedMultipliers.map(c => c.value).join(\" x \")\r\n        return calc + \" = \" + grid.getScore()\r\n    }\r\n\r\n    const renderGridOptions = (grid: VoltorbFlipGrid) => {\r\n        let state = grid?.getState()\r\n\r\n        // TODO: improve appearance on small devices\r\n        return (\r\n            <div className=\"grid-options\">\r\n                <Popup\r\n                    content=\"Move to the next level!\"\r\n                    position=\"top left\"\r\n                    mouseEnterDelay={500}\r\n                    disabled={state === GridState.Pending}\r\n                    trigger={\r\n                        <PButton\r\n                            disabled={state === GridState.Pending}\r\n                            onClick={() => nextLevel(grid)}>\r\n                            Next Level\r\n                        </PButton>\r\n                    } />\r\n\r\n                <PButton onClick={reset}>\r\n                    Reset\r\n                </PButton>\r\n\r\n                <Popup\r\n                    content=\"Recommends a tile to flip.\"\r\n                    position=\"top center\"\r\n                    mouseEnterDelay={500}\r\n                    disabled={state !== GridState.Pending}\r\n                    trigger={\r\n                        <PButton\r\n                            disabled={state !== GridState.Pending || hintCoords.length > 0}\r\n                            onClick={() => showHints(grid)}>\r\n                            Show Hint\r\n                        </PButton>\r\n                    } />\r\n\r\n                <Popup\r\n                    content=\"Highlight cells that MUST contain either 1 coin or a Voltorb, based on current information.\"\r\n                    position=\"top right\"\r\n                    mouseEnterDelay={500}\r\n                    disabled={state !== GridState.Pending}\r\n                    trigger={\r\n                        <Checkbox\r\n                            className=\"option-checkbox\"\r\n                            label=\"Show dead cells\"\r\n                            disabled={state !== GridState.Pending}\r\n                            checked={showDeadCells}\r\n                            onChange={(e, data) => setShowDeadCells(data.checked ?? false)} />\r\n                    } />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const nextLevel = (grid: VoltorbFlipGrid) => {\r\n        setHintCoords([])\r\n        props.nextLevel(grid)\r\n    }\r\n\r\n    const reset = () => {\r\n        setHintCoords([])\r\n        props.reset()\r\n    }\r\n\r\n    const showHints = (grid: VoltorbFlipGrid) => {\r\n        let hintCoords = grid.computeHints()\r\n        setHintCoords(hintCoords)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {renderGrid(props.grid)}\r\n            {renderGridState(props.grid)}\r\n            {renderGridOptions(props.grid)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst range = (max: number) => Array.from(new Array(max), (_, i) => i)\r\n","import { useState } from \"react\"\r\n\r\nimport { ResetModal } from \"./ResetModal\"\r\nimport { VoltorbFlip } from \"./VoltorbFlip\"\r\nimport { GridState, VoltorbFlipGrid } from \"./VoltorbFlipGrid\"\r\n\r\nimport \"./App.css\"\r\n\r\nconst newGrid = (level: number) => VoltorbFlipGrid.create(level)\r\n\r\nconst App = () => {\r\n    const [level, setLevel] = useState(1)\r\n    const [score, setScore] = useState(0)\r\n    const [streak, setStreak] = useState(0)\r\n    const [grid, setGrid] = useState(newGrid(level))\r\n\r\n    const [showResetModal, setShowResetModal] = useState(false)\r\n\r\n    const flipCell = (row: number, col: number) => {\r\n        grid.getCell(row, col).flip()\r\n        setGrid(new VoltorbFlipGrid(grid.grid))\r\n    }\r\n\r\n    // https://bulbapedia.bulbagarden.net/wiki/Voltorb_Flip\r\n    const nextLevel = (grid: VoltorbFlipGrid) => {\r\n        let newLevel = level\r\n        let newStreak = 0\r\n\r\n        let state = grid.getState()\r\n        if (state === GridState.Won) {\r\n            newStreak = streak + 1\r\n\r\n            if (newStreak >= 5) {\r\n                newLevel = 8\r\n            }\r\n            else {\r\n                newLevel = Math.min(8, level + 1)\r\n            }\r\n\r\n            setScore(score + grid.getScore())\r\n        }\r\n\r\n        if (state === GridState.Lost) {\r\n            let numFlippedMultipliers = grid.getFlippedMultipliers().length\r\n            if (numFlippedMultipliers < level) {\r\n                newLevel = Math.max(1, Math.min(8, level, numFlippedMultipliers))\r\n            }\r\n        }\r\n\r\n        setLevel(newLevel)\r\n        setStreak(newStreak)\r\n        setGrid(newGrid(newLevel))\r\n    }\r\n\r\n    const resetGame = () => {\r\n        setLevel(1)\r\n        setScore(0)\r\n        setStreak(0)\r\n        setGrid(newGrid(1))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ResetModal\r\n                open={showResetModal}\r\n                setOpen={setShowResetModal}\r\n                resetGame={resetGame} />\r\n\r\n            <header className=\"App-header\">\r\n                <h1>Voltorb Flip</h1>\r\n\r\n                <h4>A clone of the beloved mini-game from Pok&eacute;mon HeartGold and SoulSilver.</h4>\r\n\r\n                <VoltorbFlip\r\n                    level={level}\r\n                    streak={streak}\r\n                    score={score}\r\n                    grid={grid}\r\n                    flipCell={flipCell}\r\n                    nextLevel={nextLevel}\r\n                    reset={() => setShowResetModal(true)} />\r\n            </header>\r\n\r\n            <footer>\r\n                <a href=\"https://www.icons101.com/icon/id_60093/setid_928/Pokemon_by_HEKTakun/100_Voltorb\" title=\"voltorb icon\">Voltorb icon created by HEKTakun - Icons101</a>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}